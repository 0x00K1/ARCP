name: Release

on:
  push:
    tags:
      - 'v*'

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.6.1"

permissions:
  contents: write  # Required to create releases
  id-token: write  # Required for trusted publishing to PyPI

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      # Required configuration for tests
      ENVIRONMENT: testing
      ARCP_LOGS_DIR: /tmp/arcp_test_logs
      ARCP_DATA_DIR: /tmp/arcp_test_data
      STATE_FILE: /tmp/arcp_test_data/registry_state.json
      TZ: UTC
      ALLOWED_AGENT_TYPES: security,monitoring,automation,networking,testing
      AGENT_KEYS: test-registration-key-123,test-agent-key-456,test-security-key-789
      JWT_SECRET: test-secret-key-for-github-actions-at-least-32-chars
      JWT_ALGORITHM: HS256
      JWT_EXPIRE_MINUTES: 3600
      ADMIN_USERNAME: ARCP
      ADMIN_PASSWORD: ARCP
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Verify poetry.lock is up to date
      run: poetry lock --check

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run tests
      run: poetry run pytest

    - name: Run linting
      run: |
        poetry run black --check src/ tests/
        poetry run isort --check-only src/ tests/
        poetry run flake8 src/ tests/

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Extract version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Build package
      run: poetry build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  pypi:
    needs: [test, build]
    runs-on: ubuntu-latest
    environment: release
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true

  release:
    needs: [test, build, pypi]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$PREV_TAG" ]; then
          echo "Previous tag: $PREV_TAG"
          COMMIT_RANGE="$PREV_TAG..HEAD"
        else
          echo "No previous tag found, showing all commits"
          COMMIT_RANGE="HEAD"
        fi
        
        # Generate changelog
        echo "## Changes" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        if [ -n "$PREV_TAG" ]; then
          git log --pretty=format:"- %s (%h)" $COMMIT_RANGE >> CHANGELOG.md
        else
          # For first release, show initial commit
          git log --pretty=format:"- %s (%h)" --max-count=10 >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## PyPI Package" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "- \`pip install arcp-py==${{ needs.build.outputs.version }}\`" >> CHANGELOG.md
        
        # Read changelog
        cat CHANGELOG.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}
        files: |
          dist/*
        token: ${{ secrets.GITHUB_TOKEN }}

  notify:
    needs: [test, build, pypi, release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.build.result == 'success' && needs.pypi.result == 'success' && needs.release.result == 'success' }}
      run: |
        echo "üéâ Release ${{ github.ref_name }} completed successfully!"
        echo "- ‚úÖ Tests passed"
        echo "- ‚úÖ Package built"
        echo "- ‚úÖ PyPI package published"
        echo "- ‚úÖ GitHub release created"

    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' || needs.pypi.result == 'failure' || needs.release.result == 'failure' }}
      run: |
        echo "‚ùå Release ${{ github.ref_name }} failed!"
        echo "- Test: ${{ needs.test.result }}"
        echo "- Build: ${{ needs.build.result }}"
        echo "- PyPI: ${{ needs.pypi.result }}"
        echo "- Release: ${{ needs.release.result }}"
        exit 1 
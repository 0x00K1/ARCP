# ================================
# ARCP Configuration Example
# ================================
# Create a new file named `.env` in the same directory as this file [ROOT of the project],
# Copy this file to .env and modify the values for your environment.

# ================================
# Service Configuration
# ================================
ARCP_HOST=0.0.0.0
ARCP_PORT=8001
ARCP_DEBUG=false
ARCP_LOGS_DIR=/app/logs
ENVIRONMENT=development  # development, testing, production [REQUIRED]

# ================================
# Security Configuration
# ================================
# CORS and Host Security [OPTIONAL but important for production]
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8000,http://localhost:8001  # Comma-separated list
TRUSTED_HOSTS=localhost,127.0.0.1,arcp,redis,redis-exporter,prometheus,grafana,jaeger,172.20.0.0/16  # Comma-separated list

# CSP connect-src controls (whether dashboard JS can call external HTTP/HTTPS)
# In development, HTTP is convenient for local agents; in production prefer only HTTPS
CSP_ALLOW_CONNECT_HTTP=true
CSP_ALLOW_CONNECT_HTTPS=true

# Rate Limiting
RATE_LIMIT_RPM=100  # Requests per minute
RATE_LIMIT_BURST=20  # Burst size
SESSION_TIMEOUT=1440  # Session timeout in minutes
MAX_SESSIONS=5  # Maximum concurrent sessions per user

# Request Security
MAX_JSON_SIZE=1048576  # 1MB max JSON payload
MAX_QUERY_PARAMS=50  # Maximum query parameters
MAX_HEADER_SIZE=8192  # 8KB max header size

# Security Monitoring
SECURITY_LOGGING=true

# IP Restrictions [OPTIONAL]
# Examples:
# BLOCKED_IPS=192.168.1.10,10.0.0.5
# ALLOWED_IP_RANGES=10.0.0.0/8,192.168.0.0/16
IP_DEFAULT_DENY=false  # true: Discard (default-deny, require ALLOWED_IP_RANGES), false: Forward (default-allow, use BLOCKED_IPS)
BLOCKED_IPS=  # Comma-separated list of blocked IPs
ALLOWED_IP_RANGES=  # Comma-separated list of allowed IP ranges

# Content Filtering
CONTENT_FILTERING=true

# ================================
# Data Storage Configuration
# ================================
ARCP_DATA_DIR=/app/data
REDIS_DATA_DIR=/data
PROMETHEUS_DATA_DIR=/data
GRAFANA_DATA_DIR=/var/lib/grafana

# ================================
# State Agent Configuration
# ================================
STATE_FILE=registry_state.json

# ================================
# Timezone Configuration [REQUIRED]
# ================================
# Set your correct timezone here.
# If you're not sure, use one of the following methods:
# 1. Visit https://ipapi.co/timezone/ to auto-detect based on your IP.
# 2. Run this in a terminal:
#    curl -s https://ipapi.co/timezone/
# Common values like:
#    - Asia/Riyadh
#    - Europe/London
#    - America/New_York
#    - Asia/Tokyo
# Default is UTC (Coordinated Universal Time)
# This value affects logging, scheduling, and timestamps.
# Accepts either TZ or TIMEZONE environment variables
TZ=UTC

# ================================
# Allowed Agent Types Configuration [REQUIRED]
# ================================
# Define which agent types are allowed to register
# Must contain at least 1 agent type, maximum 100 types
# Agents with types not in this list will be rejected during registration
# Format: comma-separated list of agent types (case-insensitive)
# Each type: 2-50 characters, alphanumeric + hyphens/underscores only
ALLOWED_AGENT_TYPES=security,monitoring,automation,networking,testing

# ================================
# Agent Configuration
# ================================
AGENT_HEARTBEAT_TIMEOUT=60 # Seconds
AGENT_CLEANUP_INTERVAL=60 # Seconds
AGENT_REGISTRATION_TIMEOUT=30 # Seconds

# ================================
# Agent Registration Keys Configuration [OPTIONAL]
# ================================
# Agent Registration Keys Configuration
# These are temporary test keys - in production.. agents should get keys after real logic
AGENT_KEYS=test-agent-001,test-agent-002,test-agent-003

# ================================
# Authentication Configuration [REQUIRED]
# ================================
JWT_SECRET=your-secret-jwt-key-here-should-be-at-least-32-characters
JWT_ALGORITHM=HS256  # HS256, HS384, HS512
JWT_EXPIRE_MINUTES=3600

# Dashboard credentials
ADMIN_USERNAME=ARCP
ADMIN_PASSWORD=ARCP

# ================================
# WebSocket Configuration
# ================================
# Global defaults (fallbacks)
WEBSOCKET_INTERVAL=30 # Seconds
WEBSOCKET_TIMEOUT=30 # Seconds
WEBSOCKET_PING_INTERVAL=30 # Seconds
WEBSOCKET_MAX_CONNECTIONS=100

# Dashboard WebSocket
DASHBOARD_WS_INTERVAL=5 # Seconds
DASHBOARD_WS_TIMEOUT=30 # Seconds
DASHBOARD_WS_PING_INTERVAL=30 # Seconds
DASHBOARD_WS_MAX_CONNECTIONS=5

# Agent WebSocket
AGENT_WS_INTERVAL=5 # Seconds
AGENT_WS_TIMEOUT=30 # Seconds
AGENT_WS_PING_INTERVAL=30 # Seconds
AGENT_WS_MAX_CONNECTIONS=100

# Public WebSocket
PUBLIC_WS_INTERVAL=30 # Seconds
PUBLIC_WS_TIMEOUT=30 # Seconds
PUBLIC_WS_PING_INTERVAL=30 # Seconds
PUBLIC_WS_MAX_CONNECTIONS=100

# ================================
# Vector Search Configuration
# ================================
VECTOR_SEARCH_TOP_K=10 # Number of results to return
VECTOR_SEARCH_MIN_SIMILARITY=0.5 # Minimum similarity threshold (0.0-1.0)

# ================================
# Network Configuration
# ================================
# Network interface capacity for utilization calculation (in Mbps)
# This helps calculate accurate network utilization percentages
# Common values:
#   10 = 10 Mbps (legacy connections)
#   100 = 100 Mbps (Fast Ethernet)
#   1000 = 1 Gbps (Gigabit Ethernet) [DEFAULT]
#   10000 = 10 Gbps (10 Gigabit Ethernet)
NETWORK_INTERFACE_CAPACITY_MBPS=1000

# ================================
# Logging Configuration
# ================================
LOG_LEVEL=INFO # DEBUG, INFO, SUCCESS, WARNING, ERROR, CRITICAL
LOG_FORMAT="%(asctime)s - %(name)s - %(levelname)s - %(message)s"

# Dashboard Log Limits
# Max items kept in dashboard log buffer (in-memory and in Redis)
DASHBOARD_LOG_BUFFER_MAXLEN=10000
# Max characters allowed per single dashboard log message
DASHBOARD_LOG_MESSAGE_MAXLEN=2048

# ================================
# Azure OpenAI Configuration [OPTIONAL]
# ================================
AZURE_API_KEY=your-azure-openai-api-key
AZURE_API_BASE=https://your-resource.openai.azure.com/
AZURE_API_VERSION=your-api-version
# IMPORTANT: This MUST be an EMBEDDING model deployment, not a chat/completion model
# Recommended embedding models:
#   - text-embedding-ada-002 (Most common, good performance)
#   - text-embedding-3-small (Newer, smaller model)
#   - text-embedding-3-large (Newer, larger model)
AZURE_EMBEDDING_DEPLOYMENT=text-embedding-ada-002

# ================================
# Redis Configuration [OPTIONAL]
# ================================
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=admin
REDIS_DB=0
REDIS_HEALTH_CHECK_INTERVAL=30 # Seconds
REDIS_MAX_MEMORY=256mb # Redis memory limit (e.g., 256mb, 1gb)
# NOTE: This variable configures the Redis SERVER's maxmemory via docker-compose
#       (see redis service command: --maxmemory ${REDIS_MAX_MEMORY}). It is not
#       passed to the Python Redis client. If you use an external Redis instance,
#       set its memory limit in redis.conf or via the redis-server --maxmemory flag.
REDIS_EXPORTER_PORT=9121

# ================================
# Prometheus Configuration
# ================================
PROMETHEUS_HOST=prometheus
PROMETHEUS_PORT=9090
METRICS_SCRAPE_TOKEN=your-metrics-scrape-token-here

# ================================
# Grafana Configuration  
# ================================
GRAFANA_HOST=grafana
GRAFANA_PORT=3000
GRAFANA_PASSWORD=admin

# ================================
# OpenTelemetry Tracing Configuration
# ================================
TRACING_ENABLED=false # true == on, false == off
JAEGER_ENDPOINT=http://jaeger:14268/api/traces
OTLP_ENDPOINT=http://jaeger:4317
TRACE_SERVICE_NAME=arcp
TRACE_SERVICE_VERSION=2.0.0
TRACE_ENVIRONMENT=development
TRACE_SAMPLE_RATE=1.0
JAEGER_UI_PORT=16686
JAEGER_GRPC_PORT=14250
JAEGER_THRIFT_PORT=14268
JAEGER_OTLP_GRPC_PORT=4317
JAEGER_OTLP_HTTP_PORT=4318
JAEGER_METRICS_PORT=14269

# ================================
# Development Notes
# ================================
# For local development and testing:
# 1. Set ENVIRONMENT=development
# 2. Use a placeholder JWT_SECRET (no strict length required)
# 3. No need to configure ALLOWED_ORIGINS or TRUSTED_HOSTS
# 4. CSP_ALLOW_CONNECT_HTTP=true to allow HTTP connections to local agents
# 5. Use ARCP_DEBUG=true to enable auto-reload and detailed error messages
# 6. Set LOG_LEVEL=DEBUG for verbose logging
# 7. Acceptable to run without HTTPS (but recommended to use HTTPS in staging)

# ================================
# Production Notes
# ================================
# For secure production deployment:
# 1. Set ENVIRONMENT=production
# 2. Use a strong JWT_SECRET (at least 32 characters, ideally a 256-bit random string)
# 3. Set ALLOWED_ORIGINS to your real frontend domains (e.g., https://app.example.com)
# 4. Set TRUSTED_HOSTS to the actual domain(s) serving the backend
# 5. Set CSP_ALLOW_CONNECT_HTTP=false (HTTPS only)
# 6. Reduce RATE_LIMIT_RPM and SESSION_TIMEOUT to tighten abuse prevention
# 7. Enable SECURITY_LOGGING=true for tracking security-related events
# 8. Do not enable ARCP_DEBUG in production
# 9. Serve over HTTPS with a valid TLS certificate

# ================================
# Docker Deployment Note
# ================================
# When ENVIRONMENT=production, the TRUSTED_HOSTS should include internal container
# names/subnet for inter-container communication:
#   arcp, redis, redis-exporter, prometheus, grafana, jaeger, 172.20.0.0/16
# &&&&
# You shall copy your .env file to the deployment/docker directory
# (next to docker-compose.yml) or use 'docker compose --env-file ../../.env'

# ================================
# End of ARCP Configuration Example
# ================================